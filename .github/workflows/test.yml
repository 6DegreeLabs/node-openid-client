name: Test

on:
  push:
  pull_request:
  schedule:
    - cron: '20 11 * * 1'
  workflow_dispatch:
    inputs:
      conformance-version:
        description: 'Conformance Suite Version (commit hash)'
        required: false

jobs:
  audit:
    name: NPM Audit (Production)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/hydrogen # 18
          cache: 'npm'
          check-latest: true
      - name: Install dependencies
        run: npm clean-install
      - run: npm audit --production

  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ !startsWith(matrix.node-version, 'lts') }}
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - lts/erbium # 12
          - lts/fermium # 14
          - lts/gallium # 16
          - lts/hydrogen # 18
          - current
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        id: node
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          check-latest: true
      - name: Install dependencies
        run: npm clean-install
      - run: npm run test

  electron:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        id: node
        with:
          node-version: lts/hydrogen # 18
          cache: 'npm'
          check-latest: true
      - name: Install dependencies
        run: npm clean-install
      - run: npx xvfb-maybe npx electron@latest ./test/electron test/**/*.test.js

  build-conformance-suite:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Conformance Suite Version from GitLab
        if: ${{ !github.event.inputs.conformance-version }}
        run: |
          export VERSION=($(curl --silent "https://gitlab.com/api/v4/projects/4175605/releases" | jq -r '.[0].tag_name'))
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Set Conformance Suite Version from Workflow Dispatch
        if: ${{ github.event.inputs.conformance-version }}
        run: |
          echo "VERSION=${{ github.event.inputs.conformance-version }}" >> $GITHUB_ENV
      - id: cache-key
        run: echo "value=suite-${{ hashFiles('.github/workflows/test.yml') }}-${{ env.VERSION }}" >> $GITHUB_OUTPUT
      - name: Load Cached Conformance Suite Build
        uses: actions/cache@v3
        id: cache
        with:
          path: ./conformance-suite
          key: ${{ steps.cache-key.outputs.value }}
      - name: Conformance Suite Checkout
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: git clone https://gitlab.com/openid/conformance-suite.git
      - run: git reset --hard ${{ env.VERSION }}
        working-directory: ./conformance-suite
      - name: Conformance Suite Build
        working-directory: ./conformance-suite
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        env:
          MAVEN_CACHE: ./m2
        run: |
          sed -i -e 's/localhost/localhost.emobix.co.uk/g' src/main/resources/application.properties
          sed -i -e 's/-B clean/-B -DskipTests=true/g' builder-compose.yml
          docker-compose -f builder-compose.yml run builder

  conformance-suite:
    runs-on: ubuntu-latest
    needs:
      - audit
      - test
      - electron
      - build-conformance-suite
    env:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      DEBUG: runner,moduleId*
      SUITE_BASE_URL: https://localhost.emobix.co.uk:8443
      PLAN_NAME: ${{ matrix.setup.plan }}
      VARIANT: ${{ toJSON(matrix.setup) }}
    strategy:
      fail-fast: false
      matrix:
        setup:
          # OIDC BASIC
          - plan: oidcc-client-basic-certification-test-plan

          # OIDC IMPLICIT
          - plan: oidcc-client-implicit-certification-test-plan

          # OIDC HYBRID
          - plan: oidcc-client-hybrid-certification-test-plan

          # OIDC CONFIG
          - plan: oidcc-client-config-certification-test-plan

          # OIDC DYNAMIC
          # TODO: work around the request_uri lodging service EOL
          # - plan: oidcc-client-dynamic-certification-test-plan

          # FAPI 1.0 ID-2
          - plan: fapi-rw-id2-client-test-plan
            client_auth_type: mtls
          - plan: fapi-rw-id2-client-test-plan
            client_auth_type: private_key_jwt

          # FAPI 1.0 Advanced Final
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: private_key_jwt
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: mtls
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: mtls
            fapi_auth_request_method: pushed
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: private_key_jwt
            fapi_auth_request_method: pushed
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: mtls
            fapi_response_mode: jarm
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: private_key_jwt
            fapi_response_mode: jarm
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: mtls
            fapi_auth_request_method: pushed
            fapi_response_mode: jarm
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: private_key_jwt
            fapi_auth_request_method: pushed
            fapi_response_mode: jarm
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: mtls
            fapi_auth_request_method: pushed
            fapi_response_mode: jarm
            fapi_client_type: plain_oauth
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: mtls
            fapi_response_mode: jarm
            fapi_client_type: plain_oauth
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: private_key_jwt
            fapi_auth_request_method: pushed
            fapi_response_mode: jarm
            fapi_client_type: plain_oauth
          - plan: fapi1-advanced-final-client-test-plan
            client_auth_type: private_key_jwt
            fapi_response_mode: jarm
            fapi_client_type: plain_oauth

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Conformance Suite Version
        run: |
          export VERSION=($(curl --silent "https://gitlab.com/api/v4/projects/4175605/releases" | jq -r '.[0].tag_name'))
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Load Cached Conformance Suite Build
        uses: actions/cache@v3
        id: cache
        with:
          path: ./conformance-suite
          key: ${{ needs.build-conformance-suite.outputs.cache-key }}
      - name: Abort if Conformance Suite isn't cached
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
              core.setFailed('Conformance Suite cache hit failed')
      - name: Run Conformance Suite
        working-directory: ./conformance-suite
        run: |
          docker-compose -f docker-compose-dev.yml up -d
          while ! curl -skfail https://localhost.emobix.co.uk:8443/api/runner/available >/dev/null; do sleep 2; done
      - run: git clone --depth 1 --single-branch --branch main https://github.com/panva/openid-client-certification-suite.git runner
      - uses: actions/setup-node@v3
        with:
          node-version: lts/hydrogen # 18
          cache: 'npm'
          check-latest: true
      - run: npm clean-install
        working-directory: ./runner
      - run: npm install ${{ github.repository }}#${{ github.sha }}
        working-directory: ./runner
      - run: npm run test
        working-directory: ./runner
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          path: runner/export-*.zip
          name: ${{ matrix.setup.plan }} failed html results
          if-no-files-found: ignore
        if: ${{ failure() }}
      - name: Upload test logs
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: ${{ matrix.setup.plan }} runner logs
          path: runner/logs/*.log
        if: ${{ failure() }}
